@using Vovinam.Common
@using Vovinam.Data
@using Vovinam.WebBackend.Common
@using Vovinam.WebBackend.Web
@model User

@{
    ViewBag.Title = Model.Id == 0 ? "Tạo mới nhân viên" : "Chỉnh sửa nhân viên";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var user = (User)ViewBag.User;
}
<div class="row">
    <div class="col-xs-12">
        <div class="page-title-box">
            <h4 class="page-title">Quản lý nhân viên</h4>
            <ol class="breadcrumb p-0 m-0">
                <li>
                    <a href="@Url.Action("Index","Home")">Vovinam</a>
                </li>
                <li>
                    <a href="@Url.Action("Index","User")">Quản lý nhân viên</a>
                </li>
                <li class="active">
                    @if (Model.Id == 0)
                    {
                        <strong>Tạo mới</strong>
                    }
                    else
                    {
                        <strong>Sửa</strong>
                    }
                </li>
            </ol>

            <div class="clearfix"></div>
            <a style="margin-right:10px" onclick="$('#btCreate').click()" class="btn btn-primary waves-effect waves-light m-t-sm">Lưu</a>
            @Html.ActionLink("Thoát", "Index", null, new { @class = "btn btn-default waves-effect m-t-sm" })
        </div>
    </div>
</div>
<!-- end row -->

<div class="card-box animated fadeInRight">
    <div class="row">

        @using (Ajax.BeginForm("Create", "User", null, new AjaxCommonOption { OnSuccess = "CreateSuccess" }, new { role = "form", @id = "CreateEditAjax", enctype = "multipart/form-data" }))
        {
            <input type="hidden" name="selectedPermissions" id="selectedPermissions" />
            <div class="col-lg-12">
                <!--Box thông tin-->
                <div class="ibox ">
                    <div>
                        <h5>Thông tin nhân viên</h5>
                    </div>
                    <div class="ibox-content">
                        <div class="form-horizontal">
                            @Html.HiddenFor(model => model.Id)
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true)

                            <div class="form-group">
                                <label class="control-label col-md-2">Tên<span style="color: Red">*</span></label>
                                <div class="col-md-4">
                                    @Html.TextBoxFor(model => model.FullName, new { @class = "form-control ", data_val = "true", data_val_required = "Thông tin bắt buộc" })
                                    @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                                </div>
                                <label class="control-label col-md-2">Email</label>
                                <div class="col-md-4">
                                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control " })
                                </div>
                            </div>
                            <div class="form-group">
                                @if (Model.Id == 0)
                                {
                                    <label class="control-label col-md-2">Tên đăng nhập<span style="color: Red">*</span></label>
                                    <div class="col-md-4">
                                        @Html.TextBoxFor(model => model.UserName, new { @class = "form-control ", data_val = "true", data_val_required = "Thông tin bắt buộc" })
                                        @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                                    </div>
                                }
                                else
                                {
                                    <label class="control-label col-md-2">Tên đăng nhập</label>
                                    <div class="col-md-4">
                                        @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", @disabled = "disabled" })
                                    </div>
                                }
                                <label class="control-label col-md-2">Điện thoại</label>
                                <div class="col-md-4">
                                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control " })
                                </div>
                            </div>

                            <div class="form-group">

                                <label class="control-label col-md-2">
                                    Mật khẩu
                                    @if (Model.Id == 0)
                                    {
                                        <span style="color: Red">*</span>
                                    }
                                </label>
                                <div class="col-md-4">
                                    <input class="form-control" id="Password" name="Password" type="password">
                                </div>
                                <label class="control-label col-md-2">
                                    Xác nhận mật khẩu
                                    @if (Model.Id == 0)
                                    {
                                        <span style="color: Red">*</span>
                                    }
                                </label>
                                <div class="col-md-4">
                                    <input class="form-control" data-val="true" data-val-equalto="Mật khẩu bạn nhập không khớp" data-val-equalto-other="*.Password" id="RetypePassword" name="RetypePassword" type="password">
                                    @Html.ValidationMessage("RetypePassword")
                                </div>


                            </div>

                            <div class="form-group">
                                <label class="control-label col-md-2">Trạng thái<span style="color: Red">*</span></label>
                                <div class="col-md-4">
                                    @Html.EnumDropDownList("Status", Model.Status, typeof(UserStatus), true, "", new { @class = "form-control ", data_val = "true", data_val_required = "Thông tin bắt buộc" }, "-- Trạng thái --")
                                    @Html.ValidationMessageFor(x => x.Status)
                                </div>
                                <label class="control-label col-md-2">Hình ảnh</label>
                                <div class="col-md-4">
                                    <button  id="btnImage" type="button" class="btn btn-success waves-light waves-effect w-md">Chọn ảnh</button>
                                    <input type="file" class="form-control" name="FileAttach" id="Image" style="display:none" />
                                    <div style="margin-top:10px; ">
                                        <img src="@(Model.Image.NotEmpty() ? Url.Content(Model.Image) : "")" style="@(Model.Image.NotEmpty() ? "" : "display: none")" width="150" id="blah" />
                                    </div>
                                </div>
                            </div>
                            @if (user.IsAdminRoot)
                            {
                                <div class="form-group">
                                    <label class="control-label col-md-2">Công ty <span style="color: Red">*</span></label>
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(x => x.CompanyId, null, "-- Công ty --", new { @class = "form-control", data_val = "true", data_val_required = "Thông tin bắt buộc" })
                                        @Html.ValidationMessageFor(x => x.CompanyId)
                                    </div>
                                    <label class="control-label col-md-2">Là admin của công ty</label>
                                    <div class="col-md-4">
                                        <label class="checkbox-inline i-checks" id="IsAdminCompany">
                                            @Html.CheckBoxFor(x => x.IsAdminCompany)
                                        </label>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <input type="submit" value="Lưu" class="btn btn-primary" id="btCreate" />
                                        @Html.ActionLink("Hủy", "Index", null, new { @class = "btn btn-white " })
                                    </div>
                                    <br style="clear: both" />
                                </div>
                            }
                            else
                            {
                                @Html.HiddenFor(x => x.CompanyId)
                            }

                        </div>

                    </div>
                </div>
                <!-- End Box thông tin-->
                <!-- Box danh sách nhóm quyền-->
                @{ var groups = ViewBag.Groups as List<Group>; }
                @if (user.IsAdminRoot == false && groups != null && groups.Any())
                {
                    <div class="ibox">
                        <div>
                            <h5>Danh sách nhóm quyền</h5>

                        </div>
                        <div class="ibox-content">
                            <div class="table-responsive">
                                <div class="ibox float-e-margins">

                                    <table style="min-width: 100%" class="table-hover">
                                        @foreach (var item in groups)
                                        {
                                            <tr>
                                                <td style="width: 1%; text-align: left;"><input type="checkbox" @Html.Raw(Model.Groups.Any(x => x.GroupId == item.GroupId) ? "checked" : "") name="selectedGroup" value="@( item.GroupId)"></td>
                                                <td style="width: 20%; text-align: left;">@item.Name</td>
                                            </tr>
                                        }
                                    </table>

                                </div>
                            </div>
                        </div>

                    </div>
                }
                <!-- End Box danh sách nhóm quyền-->
                @if (user.IsAdminRoot == false)
                {
                    <div class="ibox">
                        <div >
                            <h5>Danh sách quyền</h5>
                        </div>
                        <div class="ibox-content">
                            <div class="m-b-md">
                                @Html.Partial("~/Views/GroupPermission/_PermissionTree.cshtml", Model.User_Permission.Select(x => (Permission)x.PermissionId).ToList())
                            </div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    <input type="submit" value="Lưu" class="btn btn-primary" id="btCreate" style="margin-right:10px" />
                                    @Html.ActionLink("Hủy", "Index", null, new { @class = "btn btn-white" })
                                </div>
                                <br style="clear: both" />
                            </div>
                        </div>

                    </div>
                }

            </div>
        }
    </div>
</div>



@section Styles {
    <link href="~/Content/plugin/iCheck/custom.css" rel="stylesheet" />


    <style>
        .datepicker {
            z-index: 1200 !important;
        }
    </style>
}

@section scripts
{
    <script src="~/Scripts/plugins/iCheck/icheck.min.js"></script>
    <script>
        $(document)
            .on('ready',
                function () {
                    $('.i-checks').iCheck({
                        checkboxClass: 'icheckbox_square-green',
                        radioClass: 'iradio_square-green',
                    });

                    $(function () {
                        $("#btnImage").on('click', function (e) {
                            e.preventDefault();
                            $("#Image:hidden").trigger('click');
                        });
                    });

                    function readURL(input) {

                        if (input.files && input.files[0]) {
                            var reader = new FileReader();

                            reader.onload = function (e) {
                                $('#blah').attr('src', e.target.result);
                                $('#blah').show();
                            }

                            reader.readAsDataURL(input.files[0]);
                        }
                    }

                    $("#Image")
                        .change(function () {
                            readURL(this);
                        });
                    //$('#DataFolder').tagsinput({
                    //    tagClass: 'label label-primary'
                    //});
                    @if (user.IsAdminRoot == false)
                {
                    <text>
                    $('#CreateEditAjax').submit(function () {
                        var permission = GetSelectedPermisison();
                        $('#selectedPermissions').val(permission.join());

                    });
                    </text>
                }
                    @if (Model.Id == 0){
                        <text>$("#Status").val("")</text>
                    }

                    inItUploadAjaxForm(CreateSuccess);
                });


        function inItUploadAjaxForm(successFunction) {
            window.addEventListener("submit", function (e) {
                if (!$('#CreateEditAjax').valid()) {
                    return false;
                }

                @if (user.IsAdminRoot == false)
                {
                    <text>
                var permission = GetSelectedPermisison();
                $('#selectedPermissions').val(permission.join());
                </text>
                }

                var form = e.target;
                if (form.getAttribute("enctype") === "multipart/form-data") {
                    if (form.dataset.ajax) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        var xhr = new XMLHttpRequest();
                        xhr.open(form.method, form.action);
                        xhr.onreadystatechange = function (result) {
                            if (xhr.readyState == 4 && xhr.status == 200) {
                                if (successFunction)
                                    successFunction(xhr.responseText);
                            }
                        };
                        xhr.send(new FormData(form));
                    }
                }
            }, true);
        }



        function CreateSuccess(result) {
            var data = JSON.parse(result);
            OnSuccessAjax(data);
        }

    </script>
}




